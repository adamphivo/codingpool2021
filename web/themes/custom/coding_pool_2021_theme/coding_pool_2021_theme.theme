<?php

use Drupal\adimeo_tools\Service\LanguageService;
use Drupal\adimeo_tools\Service\EnvironmentService;

/**
 * Implements hook_page_attachments_alter().
 *
 * @param $attachments
 */
function coding_pool_2021_theme_page_attachments_alter(array &$attachments) {
  $languageService = LanguageService::me();

  // Add current theme in drupalSettings data
  $currentTheme = \Drupal::theme()->getActiveTheme();
  $attachments['#attached']['drupalSettings']['theme'] = [
    'path' => $currentTheme->getPath(),
    'name' => $currentTheme->getName(),
  ];

  // Add current lang in drupalSettings data
  $attachments['#attached']['drupalSettings']['langCode'] = $languageService->getCurrentLanguageId();

  // Add current env in drupalSettings data
  $envService = EnvironmentService::me();
  $attachments['#attached']['drupalSettings']['env'] = $envService->getEnvironment();
}

/**
 * Implements hook_preprocess_html().
 */
function coding_pool_2021_theme_preprocess_html(&$variables) {
  $envService = EnvironmentService::me();
  $variables['isDevelopement'] = $envService->isDevelopment();
}

/**
 * Implements hook_preprocess_block.
 *
 * Ajoute une fonction de preprocess en fonction du type de block.
 */
function coding_pool_2021_theme_preprocess_block(&$variables) {
  if (array_key_exists('base_plugin_id', $variables)) {
    $slugValue = $variables['base_plugin_id'];
  }
  else {
    $slugValue = '';
    if(isset($variables['#block_content'])) {
      /** @var \Drupal\block_content\Entity\BlockContent $block_content */
      $block_content = $variables['#block_content'];
      $slugValue = $block_content->type->entity->id();
    }
  }

  // custom preprocess function.
  $function = __FUNCTION__ . '__' . str_replace('-', '_', $slugValue);
  if (function_exists($function)) {
    $function($variables);
  }
}


/**
 * On redefinie l'ordre des suggestions par view_mode et pas par type.
 * @param $suggestions
 * @param $vars
 */
function coding_pool_2021_theme_suggestions_alter(&$suggestions, $vars, $type) {
  _coding_pool_2021_theme_get_sorted_suggestions($suggestions, $vars);
}

/**
 * Trie les suggestions par view_mode
 * Par défaut Durpal prend les suggestion dans cet ordre :
 * - node-type-view-mode
 * - node-type
 * - node-view-mode
 * - node
 *
 * Ici on redéfini dans cet ordre :
 * - node-type-view-mode
 * - node-view-mode
 * - node-type
 * - node
 */
function _coding_pool_2021_theme_get_sorted_suggestions(&$suggestions, $vars) {

  if (array_key_exists('elements', $vars) && array_key_exists('#view_mode', $vars['elements'])) {
    $viewMode = $vars['elements']['#view_mode'];

    // Pour réordonner les suggestions en fonction du viewmode,
    // on est obligé de spliter la liste en deux index qu'on va reconcatène
    $newSuggestions = [];
    foreach ($suggestions as $suggestion) {
      if (strpos($suggestion, $viewMode) !== FALSE) {
        $newSuggestions[0][] = $suggestion;
      }
      else {
        $newSuggestions[1][] = $suggestion;
      }
    }

    // Si on a des suggestions avec view_mode et sans view mode, on concatène
    // les deux sous tableaux.
    if (array_key_exists(0, $newSuggestions) && array_key_exists(1, $newSuggestions)) {
      $newSuggestions = array_merge($newSuggestions[1], $newSuggestions[0]);
    }
    // Si on n'a que des suggestions avec view_mode, on ne prend en compte que celui-ci
    elseif (array_key_exists(0, $newSuggestions)) {
      $newSuggestions = $newSuggestions[0];
    }
    // Si on n'a que des suggestions sans view_mode, on ne prend en compte que celui-ci
    elseif (array_key_exists(1, $newSuggestions)) {
      $newSuggestions = $newSuggestions[1];
    }

    // ON réassocie des index indentique au paramètre en entrée.
    foreach ($newSuggestions as $key => $suggestion) {
      $suggestions[$key] = $suggestion;
    }
  }
}
